input {
  file {
    path => "/var/log/auth.log"
    start_position => "beginning"
    tags => ["phase1"]
  }
  file {
    path => "/var/log/auth.log"
    start_position => "beginning"
    tags => ["phase2"]
  }
}

filter {
  if "phase1" in [tags] {
    grok {
      match => { "message" => "^%{SYSLOGTIMESTAMP}\s%{DATA:sourcetype}\s%{GREEDYDATA}\[%{INT:gid}:%{INT:sid}:%{INT:rid}\]\s+\"%{DATA:alert}\"%{GREEDYDATA}From\s\"%{DATA:host}\"\sat\s+%{DATA}\s%{SYSLOGTIMESTAMP:logtimestamp}%{GREEDYDATA}\[Classification:\s%{DATA:classification}\]\s+\[Priority:\s%{INT:priority}\]\s+\{%{DATA:protocol}\}\s%{IPV4:SrcIp}:%{INT:SrcPort}->%{IPV4:DstIp}:%{INT:DstPort}" }
    }
    date {
      locale => "en"
      match => ["logtimestamp", "MMM dd HH:mm:ss"]
      target => "@timestamp"
    }
  }
  if "phase2" in [tags] {
    grok {
      match => { "message" => "%{GREEDYDATA:other}" }
    }
    mutate { gsub => ['other', "'", '"'] }
  }
}

output {
  if "_grokparsefailure" not in [tags] {
    if "phase1" in [tags] {
      file {
        path => "/var/log/splunk2csv2.log"
        message_format => "%{logtimestamp} [--] vigil-common {'source_type': '%{sourcetype}', 'time_local': '','time_utc': '%{logtimestamp}','sig_gid': %{gid},'sig_sid': %{sid},'sig_rev': %{rid},'sig_str': '%{alert}','classification': '%{classification}','severity': %{priority},'protocol': '%{protocol}','ip_src_combo': '','ip_src_address': '%{SrcIp}','ip_src_port': %{SrcPort},'ip_dst_combo': '','ip_dst_address': '%{DstIp}','ip_dst_port': %{DstPort},'source_type': '%{sourcetype}', 'ip_ids_combo': '','ip_ids_address': '%{host}','ip_ids_port': 0}"
      }
    }
    if "phase2" in [tags] {
      file {
        path => "/var/log/auth.log"
        message_format => "%{other}"
      }
    }
  }
}
